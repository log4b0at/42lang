model class Object
{
	global getDescription<CLASS>: *char { ret Reflect<CLASS>.getTag("description") : "No description"; }
	
	@inline
	wrapModel<this, MODEL>: MODEL wrapper
	{
		ModelWrapper wrapper;
		wrapper.value = this;
		wrapper.vtable = Reflect<TypeOf<this>>.vtable;
		ret <MODEL> wrapper;
	}
	
	@inline
	global instanciate<CLASS, ...PARAMS>: CLASS instance
	{
		const CLASS object = <CLASS> malloc(Reflect<CLASS>.bytesize);
		object.construct(PARAMS);
		ret object;
	}
}

enum Mode type uchar
{
	FRAG SPEC UPDNZ FCDZ
	
	isRightSpecifier(Mode mode): bool { ret mode == UPDNZ; }
}

class Entity impl Object
{
}

Entity.instanciate(

class Human ext Entity
{
	
}


struct ModelWrapper<DECL>
{
	ptr vtable;
	DECL value;
}