return (7 ~> 1);
return (7 <~ 1);

return (7 >>| 1);
return (7 |<< 1);

return (7 ><< 1);
return (7 >>< 1);

function getPrecendenceOf(op)
{
	switch(op)
	{
		case '*':
		case '/':
		case '%':
			return 3;
		case '-':
		case '+':
			return 4;
		
		
	}
}


function parseExpression(last_precedence) {

	let precedence = last_precedence;
	let expr = parsePrimary();
	let left_expr;
	
	do
	{
		const op = token;
		
		if (is_op(op))
		{
			next();
			precedence = getPrecendenceOf(op);
			if (isRTL(op))
				left_expr = expr = {kind: op, left: expr, right: parseExpression(precedence)};
			else
				left_expr = left_expr.right = {kind: op, left: left_expr.right, right: parseExpression(precedence)};
		}
		else return expr;
	}
	while(precedence <= last_precedence)

	return expr;
}

(((0 * 0) * 1) * 2)

(0 = (0 = (1 = 7))) && (1 = 7)