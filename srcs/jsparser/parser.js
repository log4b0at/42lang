// Generated by PEG.js v0.11.0, https://pegjs.org/
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  }
})(this, function() {
  "use strict";

  function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    // istanbul ignore next
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class: function(expectation) {
        var escapedParts = expectation.parts.map(function(part) {
          return Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part);
        });

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },

      any: function() {
        return "any character";
      },

      end: function() {
        return "end of input";
      },

      other: function(expectation) {
        return expectation.description;
      },

      not: function(expectation) {
        return "not " + describeExpectation(expectation.expected);
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = expected.map(describeExpectation);
      var i, j;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {};

    var peg$startRuleFunctions = { Start: peg$parseStart };
    var peg$startRuleFunction = peg$parseStart;

    var peg$c0 = "asm";
    var peg$c1 = "break";
    var peg$c2 = "bool";
    var peg$c3 = "char";
    var peg$c4 = "continue";
    var peg$c5 = "class";
    var peg$c6 = "const";
    var peg$c7 = "delete";
    var peg$c8 = "double";
    var peg$c9 = "else";
    var peg$c10 = "enum";
    var peg$c11 = "export";
    var peg$c12 = "ext";
    var peg$c13 = "false";
    var peg$c14 = "fictive";
    var peg$c15 = "float";
    var peg$c16 = "global";
    var peg$c17 = "goto";
    var peg$c18 = "if";
    var peg$c19 = "impl";
    var peg$c20 = "import";
    var peg$c21 = "int";
    var peg$c22 = "is";
    var peg$c23 = "let";
    var peg$c24 = "long";
    var peg$c25 = "model";
    var peg$c26 = "new";
    var peg$c27 = "null";
    var peg$c28 = "ptr";
    var peg$c29 = "quad";
    var peg$c30 = "ret";
    var peg$c31 = "throw";
    var peg$c32 = "true";
    var peg$c33 = "type";
    var peg$c34 = "uchar";
    var peg$c35 = "uint";
    var peg$c36 = "ulong";
    var peg$c37 = "until";
    var peg$c38 = "unstable";
    var peg$c39 = "use";
    var peg$c40 = "uword";
    var peg$c41 = "while";
    var peg$c42 = "word";
    var peg$c43 = "struct";
    var peg$c44 = ",";
    var peg$c45 = "=>";
    var peg$c46 = "=";
    var peg$c47 = ":=";
    var peg$c48 = "*=";
    var peg$c49 = "/=";
    var peg$c50 = "-=";
    var peg$c51 = "+=";
    var peg$c52 = "%=";
    var peg$c53 = "<<=";
    var peg$c54 = ">>=";
    var peg$c55 = "|=";
    var peg$c56 = "&=";
    var peg$c57 = "^=";
    var peg$c58 = ":";
    var peg$c59 = "||";
    var peg$c60 = "&&";
    var peg$c61 = "|";
    var peg$c62 = "^";
    var peg$c63 = "&";
    var peg$c64 = "==";
    var peg$c65 = "!=";
    var peg$c66 = "<=";
    var peg$c67 = ">=";
    var peg$c68 = ">";
    var peg$c69 = "<";
    var peg$c70 = ">>";
    var peg$c71 = "<<";
    var peg$c72 = "+";
    var peg$c73 = "-";
    var peg$c74 = "*";
    var peg$c75 = "/";
    var peg$c76 = "%";
    var peg$c77 = "--";
    var peg$c78 = "!";
    var peg$c79 = "++";
    var peg$c80 = "~";
    var peg$c81 = "(";
    var peg$c82 = ")";
    var peg$c83 = ".";
    var peg$c84 = "[";
    var peg$c85 = "]";
    var peg$c86 = "?";
    var peg$c87 = ";";
    var peg$c88 = "{";
    var peg$c89 = "}";
    var peg$c90 = "@";
    var peg$c91 = "0";
    var peg$c92 = "b";
    var peg$c93 = "x";
    var peg$c94 = "o";
    var peg$c95 = "'";
    var peg$c96 = "\\";
    var peg$c97 = "\"";
    var peg$c98 = "*/";
    var peg$c99 = "\n";
    var peg$c100 = "f";
    var peg$c101 = "n";
    var peg$c102 = "r";
    var peg$c103 = "t";
    var peg$c104 = "v";

    var peg$r0 = /^[$a-zA-Z_]/;
    var peg$r1 = /^[$a-zA-Z0-9_]/;
    var peg$r2 = /^[a-z0-9A-Z]/;
    var peg$r3 = /^[0-1_]/;
    var peg$r4 = /^[0-9A-F_]/;
    var peg$r5 = /^[0-7_]/;
    var peg$r6 = /^[0-9_]/;
    var peg$r7 = /^[0-9]/;
    var peg$r8 = /^[^"]/;
    var peg$r9 = /^[ \t\n\r\f\v]/;
    var peg$r10 = /^[\t\n\r\f\v ]/;

    var peg$e0 = peg$literalExpectation("break", false);
    var peg$e1 = peg$literalExpectation("bool", false);
    var peg$e2 = peg$literalExpectation("char", false);
    var peg$e3 = peg$literalExpectation("continue", false);
    var peg$e4 = peg$literalExpectation("class", false);
    var peg$e5 = peg$literalExpectation("const", false);
    var peg$e6 = peg$literalExpectation("delete", false);
    var peg$e7 = peg$literalExpectation("double", false);
    var peg$e8 = peg$literalExpectation("else", false);
    var peg$e9 = peg$literalExpectation("enum", false);
    var peg$e10 = peg$literalExpectation("ext", false);
    var peg$e11 = peg$literalExpectation("false", false);
    var peg$e12 = peg$literalExpectation("fictive", false);
    var peg$e13 = peg$literalExpectation("float", false);
    var peg$e14 = peg$literalExpectation("global", false);
    var peg$e15 = peg$literalExpectation("if", false);
    var peg$e16 = peg$literalExpectation("impl", false);
    var peg$e17 = peg$literalExpectation("int", false);
    var peg$e18 = peg$literalExpectation("let", false);
    var peg$e19 = peg$literalExpectation("long", false);
    var peg$e20 = peg$literalExpectation("model", false);
    var peg$e21 = peg$literalExpectation("null", false);
    var peg$e22 = peg$literalExpectation("ptr", false);
    var peg$e23 = peg$literalExpectation("quad", false);
    var peg$e24 = peg$literalExpectation("ret", false);
    var peg$e25 = peg$literalExpectation("true", false);
    var peg$e26 = peg$literalExpectation("type", false);
    var peg$e27 = peg$literalExpectation("uchar", false);
    var peg$e28 = peg$literalExpectation("uint", false);
    var peg$e29 = peg$literalExpectation("ulong", false);
    var peg$e30 = peg$literalExpectation("until", false);
    var peg$e31 = peg$literalExpectation("unstable", false);
    var peg$e32 = peg$literalExpectation("uword", false);
    var peg$e33 = peg$literalExpectation("while", false);
    var peg$e34 = peg$literalExpectation("word", false);
    var peg$e35 = peg$literalExpectation("struct", false);
    var peg$e36 = peg$literalExpectation(",", false);
    var peg$e37 = peg$literalExpectation("=>", false);
    var peg$e38 = peg$literalExpectation("=", false);
    var peg$e39 = peg$literalExpectation(":=", false);
    var peg$e40 = peg$literalExpectation("*=", false);
    var peg$e41 = peg$literalExpectation("/=", false);
    var peg$e42 = peg$literalExpectation("-=", false);
    var peg$e43 = peg$literalExpectation("+=", false);
    var peg$e44 = peg$literalExpectation("%=", false);
    var peg$e45 = peg$literalExpectation("<<=", false);
    var peg$e46 = peg$literalExpectation(">>=", false);
    var peg$e47 = peg$literalExpectation("|=", false);
    var peg$e48 = peg$literalExpectation("&=", false);
    var peg$e49 = peg$literalExpectation("^=", false);
    var peg$e50 = peg$literalExpectation(":", false);
    var peg$e51 = peg$literalExpectation("||", false);
    var peg$e52 = peg$literalExpectation("&&", false);
    var peg$e53 = peg$literalExpectation("|", false);
    var peg$e54 = peg$literalExpectation("^", false);
    var peg$e55 = peg$literalExpectation("&", false);
    var peg$e56 = peg$literalExpectation("==", false);
    var peg$e57 = peg$literalExpectation("!=", false);
    var peg$e58 = peg$literalExpectation("<=", false);
    var peg$e59 = peg$literalExpectation(">=", false);
    var peg$e60 = peg$literalExpectation(">", false);
    var peg$e61 = peg$literalExpectation("<", false);
    var peg$e62 = peg$literalExpectation(">>", false);
    var peg$e63 = peg$literalExpectation("<<", false);
    var peg$e64 = peg$literalExpectation("+", false);
    var peg$e65 = peg$literalExpectation("-", false);
    var peg$e66 = peg$literalExpectation("*", false);
    var peg$e67 = peg$literalExpectation("/", false);
    var peg$e68 = peg$literalExpectation("%", false);
    var peg$e69 = peg$literalExpectation("--", false);
    var peg$e70 = peg$literalExpectation("!", false);
    var peg$e71 = peg$literalExpectation("++", false);
    var peg$e72 = peg$literalExpectation("~", false);
    var peg$e73 = peg$literalExpectation("new", false);
    var peg$e74 = peg$literalExpectation("(", false);
    var peg$e75 = peg$literalExpectation(")", false);
    var peg$e76 = peg$literalExpectation(".", false);
    var peg$e77 = peg$literalExpectation("[", false);
    var peg$e78 = peg$literalExpectation("]", false);
    var peg$e79 = peg$otherExpectation("type");
    var peg$e80 = peg$otherExpectation("identifier");
    var peg$e81 = peg$classExpectation([["a", "z"], ["0", "9"], ["A", "Z"]], false, false);
    var peg$e82 = peg$literalExpectation(";", false);
    var peg$e83 = peg$literalExpectation("{", false);
    var peg$e84 = peg$literalExpectation("}", false);
    var peg$e85 = peg$literalExpectation("0", false);
    var peg$e86 = peg$literalExpectation("b", false);
    var peg$e87 = peg$classExpectation([["0", "1"], "_"], false, false);
    var peg$e88 = peg$literalExpectation("x", false);
    var peg$e89 = peg$classExpectation([["0", "9"], ["A", "F"], "_"], false, false);
    var peg$e90 = peg$literalExpectation("o", false);
    var peg$e91 = peg$classExpectation([["0", "7"], "_"], false, false);
    var peg$e92 = peg$classExpectation([["0", "9"], "_"], false, false);
    var peg$e93 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e94 = peg$literalExpectation("'", false);
    var peg$e95 = peg$literalExpectation("\\", false);
    var peg$e96 = peg$anyExpectation();
    var peg$e97 = peg$literalExpectation("\"", false);
    var peg$e98 = peg$classExpectation(["\""], true, false);
    var peg$e99 = peg$otherExpectation("whitespace");
    var peg$e100 = peg$literalExpectation("f", false);
    var peg$e101 = peg$literalExpectation("n", false);
    var peg$e102 = peg$literalExpectation("r", false);
    var peg$e103 = peg$literalExpectation("t", false);
    var peg$e104 = peg$literalExpectation("v", false);

    var peg$f0 = function(D) { return new Module(D);};
    var peg$f1 = function(p) {return p;};
    var peg$f2 = function(L, R) { return op(L,R); };
    var peg$f3 = function(L, R) { return R ? new AssignOperation(L,R[0],R[1]) : L; };
    var peg$f4 = function(L, R) { return new UnaryOperation(L,R); };
    var peg$f5 = function(L, R) { return new CastOperation(L,R);};
    var peg$f6 = function(U) { return U; };
    var peg$f7 = function(L, O) {return 'r'+O;};
    var peg$f8 = function(L, R) { return R ? new UnaryOperation(R,L) : L; };
    var peg$f9 = function(R) {return null};
    var peg$f10 = function(R, A) {return A};
    var peg$f11 = function(R, A) {return new NewExpression(R,A);};
    var peg$f12 = function(I) {return new IdentifierMember(I);};
    var peg$f13 = function(H, I) {return new IdentifierMember(I);};
    var peg$f14 = function(H, E) {return new ExpressionMember(E);};
    var peg$f15 = function(H) {return null};
    var peg$f16 = function(H, A) {return new CallExpression(A);};
    var peg$f17 = function(H, R0) { return R0; };
    var peg$f18 = function(H, T) { return LTR(H,T); };
    var peg$f19 = function(E) {return E;};
    var peg$f20 = function(R, A) {return new AddressExpression(R,A);};
    var peg$f21 = function(p) { return p; };
    var peg$f22 = function(n, l, i, s, t) {return new PointerType(!!n,!!i,!!l,t);};
    var peg$f23 = function(n, l, i, r) {return new ReferenceType(!!n,!!i,!!l,r);};
    var peg$f24 = function(n, l, i, t) {return t;};
    var peg$f25 = function(t) {return t;};
    var peg$f26 = function(H, T) {return T;};
    var peg$f27 = function(H, T) { return FLAT(H,T); };
    var peg$f28 = function(i, TA) {return TA;};
    var peg$f29 = function(i, ta, I, TA) {return TA;};
    var peg$f30 = function(i, ta, I, TA) {return TA ? new TemplatedReferenceMember(I,TA) : new ReferenceMember(I)};
    var peg$f31 = function(i, ta, T) { return LTR(ta ? new TemplatedReferenceMember(i,ta) : new ReferenceMember(i), T); };
    var peg$f32 = function(H, T) { return FLAT(H, T); };
    var peg$f33 = function(P) {return P;};
    var peg$f34 = function(R) {return R;};
    var peg$f35 = function(A) {return A;};
    var peg$f36 = function() {return true;};
    var peg$f37 = function(T, I) {return I;};
    var peg$f38 = function(T, I) {return new Ret(T, I);};
    var peg$f39 = function(D) { return new Model(D); };
    var peg$f40 = function(I, T, P, B) {return new EnumDeclaration(I,B,P,T);};
    var peg$f41 = function(I, T, E, M, B) {return new ClassDeclaration(I,B,E,M,T);};
    var peg$f42 = function(I, T, M, B) {return new StructDeclaration(I,B,M,T);};
    var peg$f43 = function(I, A, R, B) { return new FunctionDeclaration(I,A,R,B); };
    var peg$f44 = function(I, A, R, B) { return new MacroDeclaration(I,A,R,B); };
    var peg$f45 = function(I, F) { return F; };
    var peg$f46 = function(H, A) {return A;};
    var peg$f47 = function(H, T) {return FLAT(H,T);};
    var peg$f48 = function(G, S, T, I) {return new ArgumentDeclaration(T, I, G, S);};
    var peg$f49 = function(H, T) {return new TemplateDeclaration(T);};
    var peg$f50 = function(H, T) {return FLAT(new TemplateDeclaration(H),T);};
    var peg$f51 = function(S) {return null;};
    var peg$f52 = function(S, T, I, E) {return E;};
    var peg$f53 = function(S, T, I, E) { return new VariableDeclaration(I,T,E,S);};
    var peg$f54 = function(G, F, B) { if(G) B.global = true; if(F) B.fictive = true; return B; };
    var peg$f55 = function(F, B) { B.global = true; if(F) B.fictive = true; return B; };
    var peg$f56 = function(I) {return I;};
    var peg$f57 = function() {return null;};
    var peg$f58 = function(E) { return new RetInstruction(E); };
    var peg$f59 = function(C, S, I) {return I;};
    var peg$f60 = function(C, S, F) { return new BranchInstruction(C,S,F); };
    var peg$f61 = function(C, S, F) { return new BranchExpression(C,S,F); };
    var peg$f62 = function() {return false};
    var peg$f63 = function() {return true};
    var peg$f64 = function(N, E, I) { return new LoopInstruction(E, N, I); };
    var peg$f65 = function() { return new BreakInstruction(); };
    var peg$f66 = function(E) { return new DeleteInstruction(E); };
    var peg$f67 = function() { return new ContinueInstruction(); };
    var peg$f68 = function(D) {return D;};
    var peg$f69 = function(I, V) {return FLAT(H,T)};
    var peg$f70 = function(b) {return parseInt(b.replace(/_/g, ''), 2); };
    var peg$f71 = function(h) {return parseInt(h.replace(/_/g, ''), 16); };
    var peg$f72 = function(o) {return parseInt(o.replace(/_/g, ''), 8); };
    var peg$f73 = function(n) { return n; };
    var peg$f74 = function(i) {return true;};
    var peg$f75 = function(i, f) { return f ? parseFloat(text()) : parseInt(i.replace(/_/g, '')); };
    var peg$f76 = function(s) {return unescapeSequence(s);};
    var peg$f77 = function(c) { return c.charCodeAt(0); };
    var peg$f78 = function(s) { return s.join(''); };
    var peg$f79 = function() {return 1;};
    var peg$f80 = function() {return 0;};
    var peg$f81 = function(s) {return s;};
    var peg$f82 = function() { return "\b"; };
    var peg$f83 = function() { return "\f"; };
    var peg$f84 = function() { return "\n"; };
    var peg$f85 = function() { return "\r"; };
    var peg$f86 = function() { return "\t"; };
    var peg$f87 = function() { return "\v"; };
    var peg$f88 = function() { error("unknow espace sequence"); };

    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$expected = [];
    var peg$silentFails = 0;

    var peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function offset() {
      return peg$savedPos;
    }

    function range() {
      return [peg$savedPos, peg$currPos];
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos];
      var p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;

        return details;
      }
    }

    var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
    function peg$computeLocation(startPos, endPos) {
      var loc = {};

      if ( peg$VALIDFILENAME ) loc.filename = options.filename;

      var startPosDetails = peg$computePosDetails(startPos);
      loc.start = {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      };

      var endPosDetails = peg$computePosDetails(endPos);
      loc.end = {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      };

      return loc;
    }

    function peg$begin() {
      peg$expected.push({ pos: peg$currPos, variants: [] });
    }

    function peg$expect(expected) {
      var top = peg$expected[peg$expected.length - 1];

      if (peg$currPos < top.pos) { return; }

      if (peg$currPos > top.pos) {
        top.pos = peg$currPos;
        top.variants = [];
      }

      top.variants.push(expected);
    }

    function peg$end(invert) {
      var expected = peg$expected.pop();
      var top = peg$expected[peg$expected.length - 1];
      var variants = expected.variants;

      if (top.pos !== expected.pos) { return; }

      if (invert) {
        variants = variants.map(function(e) {
          return e.type === "not" ? e.expected : { type: "not", expected: e };
        });
      }

      Array.prototype.push.apply(top.variants, variants);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

  function peg$buildError() {
  	var expected = peg$expected[0];
  	var failPos = expected.pos;
  	// if "unexpected" rule exist this might throw the appropriate error.
  	if (typeof peg$parseunexpected !== 'undefined') {
  	  // make peg$expect temporary unavailable, set the cursor position to the fail position
  	  // next get the output of the rule, if it's a string, return it.
  	  const tmp = peg$expect;
  	  peg$expect = new Function();
  	  peg$currPos = failPos;
  	  const unexpected = peg$parseunexpected();
  	  peg$expect = tmp;
  	  if (typeof unexpected === 'string') {
  		const length = peg$currPos - failPos;
  		const location = failPos < input.length
  		? peg$computeLocation(failPos, failPos + length)
  		: peg$computeLocation(failPos, failPos);
  		return new peg$SyntaxError( unexpected, expected.variants, unexpected, location);
  	  }
  	}
  	// else return standard error.
  	const unexpected = input.charAt(failPos);
  	const location = failPos < input.length
  		? peg$computeLocation(failPos, failPos + 1)
  		: peg$computeLocation(failPos, failPos);
  	return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected.variants, unexpected), expected.variants, unexpected, location);
  }
    function peg$parseStart() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$parseModule();

      return s0;
    }

    function peg$parseModule() {
      var s0, s1, s2;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseDeclarations();
      peg$savedPos = s0;
      s0 = peg$f0(s2);

      return s0;
    }

    function peg$parseASM() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 3) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBREAK() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e0);
      if (input.substr(peg$currPos, 5) === peg$c1) {
        s0 = peg$c1;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBOOL() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e1);
      if (input.substr(peg$currPos, 4) === peg$c2) {
        s0 = peg$c2;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCHAR() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e2);
      if (input.substr(peg$currPos, 4) === peg$c3) {
        s0 = peg$c3;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCONTINUE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e3);
      if (input.substr(peg$currPos, 8) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCLASS() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e4);
      if (input.substr(peg$currPos, 5) === peg$c5) {
        s0 = peg$c5;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCONST() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e5);
      if (input.substr(peg$currPos, 5) === peg$c6) {
        s0 = peg$c6;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDELETE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e6);
      if (input.substr(peg$currPos, 6) === peg$c7) {
        s0 = peg$c7;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDOUBLE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e7);
      if (input.substr(peg$currPos, 6) === peg$c8) {
        s0 = peg$c8;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseELSE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e8);
      if (input.substr(peg$currPos, 4) === peg$c9) {
        s0 = peg$c9;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseENUM() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e9);
      if (input.substr(peg$currPos, 4) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEXPORT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 6) === peg$c11) {
        s0 = peg$c11;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEXT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e10);
      if (input.substr(peg$currPos, 3) === peg$c12) {
        s0 = peg$c12;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFALSE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e11);
      if (input.substr(peg$currPos, 5) === peg$c13) {
        s0 = peg$c13;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFICTIVE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e12);
      if (input.substr(peg$currPos, 7) === peg$c14) {
        s0 = peg$c14;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFLOAT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e13);
      if (input.substr(peg$currPos, 5) === peg$c15) {
        s0 = peg$c15;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGLOBAL() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e14);
      if (input.substr(peg$currPos, 6) === peg$c16) {
        s0 = peg$c16;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGOTO() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 4) === peg$c17) {
        s0 = peg$c17;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIF() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e15);
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s0 = peg$c18;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIMPL() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e16);
      if (input.substr(peg$currPos, 4) === peg$c19) {
        s0 = peg$c19;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIMPORT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 6) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e17);
      if (input.substr(peg$currPos, 3) === peg$c21) {
        s0 = peg$c21;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIS() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 2) === peg$c22) {
        s0 = peg$c22;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLET() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e18);
      if (input.substr(peg$currPos, 3) === peg$c23) {
        s0 = peg$c23;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLONG() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e19);
      if (input.substr(peg$currPos, 4) === peg$c24) {
        s0 = peg$c24;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMODEL() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e20);
      if (input.substr(peg$currPos, 5) === peg$c25) {
        s0 = peg$c25;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNEW() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 3) === peg$c26) {
        s0 = peg$c26;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNULL() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e21);
      if (input.substr(peg$currPos, 4) === peg$c27) {
        s0 = peg$c27;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePTR() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e22);
      if (input.substr(peg$currPos, 3) === peg$c28) {
        s0 = peg$c28;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseQUAD() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e23);
      if (input.substr(peg$currPos, 4) === peg$c29) {
        s0 = peg$c29;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRET() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e24);
      if (input.substr(peg$currPos, 3) === peg$c30) {
        s0 = peg$c30;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTHROW() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 5) === peg$c31) {
        s0 = peg$c31;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTRUE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e25);
      if (input.substr(peg$currPos, 4) === peg$c32) {
        s0 = peg$c32;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTYPE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e26);
      if (input.substr(peg$currPos, 4) === peg$c33) {
        s0 = peg$c33;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUCHAR() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e27);
      if (input.substr(peg$currPos, 5) === peg$c34) {
        s0 = peg$c34;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUINT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e28);
      if (input.substr(peg$currPos, 4) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseULONG() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e29);
      if (input.substr(peg$currPos, 5) === peg$c36) {
        s0 = peg$c36;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUNTIL() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e30);
      if (input.substr(peg$currPos, 5) === peg$c37) {
        s0 = peg$c37;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUNSTABLE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e31);
      if (input.substr(peg$currPos, 8) === peg$c38) {
        s0 = peg$c38;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUSE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      if (input.substr(peg$currPos, 3) === peg$c39) {
        s0 = peg$c39;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUWORD() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e32);
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s0 = peg$c40;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWHILE() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e33);
      if (input.substr(peg$currPos, 5) === peg$c41) {
        s0 = peg$c41;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWORD() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e34);
      if (input.substr(peg$currPos, 4) === peg$c42) {
        s0 = peg$c42;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSTRUCT() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e35);
      if (input.substr(peg$currPos, 6) === peg$c43) {
        s0 = peg$c43;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePrimitive() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parsePTR();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCHAR();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBOOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseUCHAR();
              if (s1 === peg$FAILED) {
                s1 = peg$parseFLOAT();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseWORD();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseDOUBLE();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseUINT();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseUWORD();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseLONG();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseULONG();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseQUAD();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f1(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$parseNumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parseChar();
        if (s0 === peg$FAILED) {
          s0 = peg$parseString();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNamedLiteral();
          }
        }
      }

      return s0;
    }

    function peg$parseComma() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseLambda();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e36);
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c44;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseComma();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLambda() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseAssign();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e37);
        if (input.substr(peg$currPos, 2) === peg$c45) {
          s3 = peg$c45;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLambda();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAssign() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseSelectOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e38);
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c46;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e39);
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s3 = peg$c47;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            rule$expects(peg$e40);
            if (input.substr(peg$currPos, 2) === peg$c48) {
              s3 = peg$c48;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              rule$expects(peg$e41);
              if (input.substr(peg$currPos, 2) === peg$c49) {
                s3 = peg$c49;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                rule$expects(peg$e42);
                if (input.substr(peg$currPos, 2) === peg$c50) {
                  s3 = peg$c50;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  rule$expects(peg$e43);
                  if (input.substr(peg$currPos, 2) === peg$c51) {
                    s3 = peg$c51;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 === peg$FAILED) {
                    rule$expects(peg$e44);
                    if (input.substr(peg$currPos, 2) === peg$c52) {
                      s3 = peg$c52;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 === peg$FAILED) {
                      rule$expects(peg$e45);
                      if (input.substr(peg$currPos, 3) === peg$c53) {
                        s3 = peg$c53;
                        peg$currPos += 3;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 === peg$FAILED) {
                        rule$expects(peg$e46);
                        if (input.substr(peg$currPos, 3) === peg$c54) {
                          s3 = peg$c54;
                          peg$currPos += 3;
                        } else {
                          s3 = peg$FAILED;
                        }
                        if (s3 === peg$FAILED) {
                          rule$expects(peg$e47);
                          if (input.substr(peg$currPos, 2) === peg$c55) {
                            s3 = peg$c55;
                            peg$currPos += 2;
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 === peg$FAILED) {
                            rule$expects(peg$e48);
                            if (input.substr(peg$currPos, 2) === peg$c56) {
                              s3 = peg$c56;
                              peg$currPos += 2;
                            } else {
                              s3 = peg$FAILED;
                            }
                            if (s3 === peg$FAILED) {
                              rule$expects(peg$e49);
                              if (input.substr(peg$currPos, 2) === peg$c57) {
                                s3 = peg$c57;
                                peg$currPos += 2;
                              } else {
                                s3 = peg$FAILED;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAssign();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f3(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSelectOR() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseLogicOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e50);
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c58;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSelectOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLogicOR() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseLogicAND();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e51);
        if (input.substr(peg$currPos, 2) === peg$c59) {
          s3 = peg$c59;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLogicOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLogicAND() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseBinaryOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e52);
        if (input.substr(peg$currPos, 2) === peg$c60) {
          s3 = peg$c60;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLogicAND();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBinaryOR() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseBinaryXOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e53);
        if (input.charCodeAt(peg$currPos) === 124) {
          s3 = peg$c61;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBinaryOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBinaryXOR() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseBinaryAND();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e54);
        if (input.charCodeAt(peg$currPos) === 94) {
          s3 = peg$c62;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBinaryXOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBinaryAND() {
      var s0, s1, s2, s3, s4, s5;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseCompare();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e55);
        if (input.charCodeAt(peg$currPos) === 38) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$begin();
          rule$expects(peg$e55);
          if (input.charCodeAt(peg$currPos) === 38) {
            s5 = peg$c63;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          peg$end(true);
          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseBinaryAND();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCompare() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseRelativeCompare();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e56);
        if (input.substr(peg$currPos, 2) === peg$c64) {
          s3 = peg$c64;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e57);
          if (input.substr(peg$currPos, 2) === peg$c65) {
            s3 = peg$c65;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCompare();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRelativeCompare() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseShift();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e58);
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s3 = peg$c66;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e59);
          if (input.substr(peg$currPos, 2) === peg$c67) {
            s3 = peg$c67;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            rule$expects(peg$e60);
            if (input.charCodeAt(peg$currPos) === 62) {
              s3 = peg$c68;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              rule$expects(peg$e61);
              if (input.charCodeAt(peg$currPos) === 60) {
                s3 = peg$c69;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRelativeCompare();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseShift() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseSum();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e62);
        if (input.substr(peg$currPos, 2) === peg$c70) {
          s3 = peg$c70;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e63);
          if (input.substr(peg$currPos, 2) === peg$c71) {
            s3 = peg$c71;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseShift();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSum() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseProduct();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e64);
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c72;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e65);
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c73;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSum();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseProduct() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseUnary();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e66);
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c74;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e67);
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c75;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            rule$expects(peg$e68);
            if (input.charCodeAt(peg$currPos) === 37) {
              s3 = peg$c76;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseProduct();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnary() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$currPos;
      rule$expects(peg$e69);
      if (input.substr(peg$currPos, 2) === peg$c77) {
        s3 = peg$c77;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        rule$expects(peg$e65);
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c73;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e70);
          if (input.charCodeAt(peg$currPos) === 33) {
            s3 = peg$c78;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            rule$expects(peg$e71);
            if (input.substr(peg$currPos, 2) === peg$c79) {
              s3 = peg$c79;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              rule$expects(peg$e66);
              if (input.charCodeAt(peg$currPos) === 42) {
                s3 = peg$c74;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                rule$expects(peg$e72);
                if (input.charCodeAt(peg$currPos) === 126) {
                  s3 = peg$c80;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  rule$expects(peg$e64);
                  if (input.charCodeAt(peg$currPos) === 43) {
                    s3 = peg$c72;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseUnary();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f4(s3, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCast();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseUnary();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f5(s3, s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseRightUnary();
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRightUnary() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseVerbose();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e69);
        if (input.substr(peg$currPos, 2) === peg$c77) {
          s3 = peg$c77;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          rule$expects(peg$e71);
          if (input.substr(peg$currPos, 2) === peg$c79) {
            s3 = peg$c79;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          peg$savedPos = s2;
          s2 = peg$f7(s1, s3);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f8(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVerbose() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e73);
      if (input.substr(peg$currPos, 3) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseReference();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$currPos;
            rule$expects(peg$e74);
            if (input.charCodeAt(peg$currPos) === 40) {
              s6 = peg$c81;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseComma();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parse_();
                peg$savedPos = s7;
                s8 = peg$f9(s3);
                s7 = s8;
              }
              if (s7 !== peg$FAILED) {
                rule$expects(peg$e75);
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c82;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_();
                  peg$savedPos = s5;
                  s5 = peg$f10(s3, s7);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f11(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseBranchExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMember();
        }
      }

      return s0;
    }

    function peg$parseMember() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f12(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$parsePrimary();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        rule$expects(peg$e76);
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c83;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseIdentifier();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f13(s1, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = peg$currPos;
          rule$expects(peg$e77);
          if (input.charCodeAt(peg$currPos) === 91) {
            s6 = peg$c84;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseAssign();
            if (s7 !== peg$FAILED) {
              rule$expects(peg$e78);
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c85;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f14(s1, s7);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            rule$expects(peg$e74);
            if (input.charCodeAt(peg$currPos) === 40) {
              s6 = peg$c81;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseComma();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parse_();
                peg$savedPos = s7;
                s8 = peg$f15(s1);
                s7 = s8;
              }
              if (s7 !== peg$FAILED) {
                rule$expects(peg$e75);
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c82;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s5 = peg$f16(s1, s7);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s4;
          s4 = peg$f17(s1, s5);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          rule$expects(peg$e76);
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c83;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseIdentifier();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f13(s1, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            rule$expects(peg$e77);
            if (input.charCodeAt(peg$currPos) === 91) {
              s6 = peg$c84;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAssign();
              if (s7 !== peg$FAILED) {
                rule$expects(peg$e78);
                if (input.charCodeAt(peg$currPos) === 93) {
                  s8 = peg$c85;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s5 = peg$f14(s1, s7);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              rule$expects(peg$e74);
              if (input.charCodeAt(peg$currPos) === 40) {
                s6 = peg$c81;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseComma();
                if (s7 === peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  peg$savedPos = s7;
                  s8 = peg$f15(s1);
                  s7 = s8;
                }
                if (s7 !== peg$FAILED) {
                  rule$expects(peg$e75);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c82;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s5 = peg$f16(s1, s7);
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            peg$savedPos = s4;
            s4 = peg$f17(s1, s5);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f18(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePrimary() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e74);
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c81;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLambda();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e75);
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAddressExpression();
        }
      }

      return s0;
    }

    function peg$parseAddressExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e55);
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c63;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseReference();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$currPos;
          rule$expects(peg$e74);
          if (input.charCodeAt(peg$currPos) === 40) {
            s6 = peg$c81;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseComma();
            if (s7 === peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parse_();
              peg$savedPos = s7;
              s8 = peg$f9(s3);
              s7 = s8;
            }
            if (s7 !== peg$FAILED) {
              rule$expects(peg$e75);
              if (input.charCodeAt(peg$currPos) === 41) {
                s8 = peg$c82;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                peg$savedPos = s5;
                s5 = peg$f10(s3, s7);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f20(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseType() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e79);
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsePrimitive();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f21(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 63) {
          s1 = peg$c86;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 38) {
          s2 = peg$c63;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 33) {
          s3 = peg$c78;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c74;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s7 = peg$c84;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseConstantExpression();
            if (s8 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s9 = peg$c85;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseType();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f22(s1, s2, s3, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseReference();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$f23(s1, s2, s3, s5);
          }
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s1, s2, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;

      return s0;
    }

    function peg$parseCast() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e61);
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseType();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e60);
          if (input.charCodeAt(peg$currPos) === 62) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimitive();
      }

      return s0;
    }

    function peg$parseReferences() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseReference();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = [];
        s4 = peg$currPos;
        rule$expects(peg$e36);
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c44;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseReference();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s4;
            s4 = peg$f26(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          rule$expects(peg$e36);
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c44;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseReference();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              peg$savedPos = s4;
              s4 = peg$f26(s1, s7);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f27(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReference() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseTemplateArguments();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          peg$savedPos = s2;
          s2 = peg$f28(s1, s3);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parse_();
        s4 = [];
        s5 = peg$currPos;
        rule$expects(peg$e76);
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c83;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseIdentifier();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$currPos;
            s11 = peg$parseTemplateArguments();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              peg$savedPos = s10;
              s10 = peg$f29(s1, s2, s8, s11);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            peg$savedPos = s5;
            s5 = peg$f30(s1, s2, s8, s10);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          rule$expects(peg$e76);
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c83;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseIdentifier();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$currPos;
              s11 = peg$parseTemplateArguments();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                peg$savedPos = s10;
                s10 = peg$f29(s1, s2, s8, s11);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              peg$savedPos = s5;
              s5 = peg$f30(s1, s2, s8, s10);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f31(s1, s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTemplateArguments() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e61);
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseTemplateArgument();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = [];
          s6 = peg$currPos;
          rule$expects(peg$e36);
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c44;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseTemplateArgument();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s6;
              s6 = peg$f26(s3, s9);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            rule$expects(peg$e36);
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c44;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseTemplateArgument();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                peg$savedPos = s6;
                s6 = peg$f26(s3, s9);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          rule$expects(peg$e60);
          if (input.charCodeAt(peg$currPos) === 62) {
            s6 = peg$c68;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f32(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTemplateArgument() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$parseType();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
      }

      return s0;
    }

    function peg$parseConstantExpression() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$parseAssign();

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e80);
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
        }
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      peg$silentFails--;

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e81);
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTypeParameter() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseTYPE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePrimitive();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f33(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseImplParameter() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseIMPL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseReferences();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f34(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExtParameter() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseEXT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseReferences();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f34(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStabilityParameter() {
      var s0, s1, s2;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseCONST();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNSTABLE();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f35(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGlobalParameter() {
      var s0, s1, s2;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseGLOBAL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f36();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFictiveParameter() {
      var s0, s1, s2;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseFICTIVE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f36();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRet() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e50);
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c58;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseType();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$currPos;
          s6 = peg$parseIdentifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s5;
            s5 = peg$f37(s3, s6);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f38(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDeclarations() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = [];
      s1 = peg$parseGlobalVariableDeclaration();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDeclaration();
        if (s1 === peg$FAILED) {
          s1 = peg$parseModel();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseGlobalVariableDeclaration();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDeclaration();
          if (s1 === peg$FAILED) {
            s1 = peg$parseModel();
          }
        }
      }

      return s0;
    }

    function peg$parseModel() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseMODEL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDeclaration();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f39(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDeclaration() {
      var s0;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$parseClassDeclaration();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEnumDeclaration();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStructDeclaration();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFunctionDeclaration();
          }
        }
      }

      return s0;
    }

    function peg$parseEnumDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseENUM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseTemplatesDeclarations();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseTypeParameter();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseEnumBlock();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f40(s3, s5, s6, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseCLASS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseTemplatesDeclarations();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseExtParameter();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseImplParameter();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parseClassBlock();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f41(s3, s5, s6, s7, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStructDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseSTRUCT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseTemplatesDeclarations();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseImplParameter();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseStructBlock();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f42(s3, s5, s6, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFunctionDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        s4 = peg$parseArgumentsDeclarations();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseRet();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseInstructionBlock();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f43(s1, s4, s5, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseTemplatesDeclarations();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRet();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseInstructionBlock();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f44(s1, s4, s5, s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f45(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArgumentsDeclarations() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e74);
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c81;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        s4 = peg$parseArgumentDeclaration();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = [];
          s7 = peg$currPos;
          rule$expects(peg$e36);
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c44;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseArgumentDeclaration();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s7;
              s7 = peg$f46(s4, s10);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            rule$expects(peg$e36);
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c44;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parseArgumentDeclaration();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                peg$savedPos = s7;
                s7 = peg$f46(s4, s10);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          peg$savedPos = s3;
          s3 = peg$f47(s4, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e75);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c82;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f35(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArgumentDeclaration() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseGlobalParameter();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseStabilityParameter();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseType();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseIdentifier();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f48(s1, s2, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTemplatesDeclarations() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e61);
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = [];
          s6 = peg$currPos;
          rule$expects(peg$e36);
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c44;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseIdentifier();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s6;
              s6 = peg$f49(s3, s9);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            rule$expects(peg$e36);
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c44;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseIdentifier();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                peg$savedPos = s6;
                s6 = peg$f49(s3, s9);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          rule$expects(peg$e60);
          if (input.charCodeAt(peg$currPos) === 62) {
            s6 = peg$c68;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f50(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBasicVariableDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseStabilityParameter();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$currPos;
      s3 = peg$parseLET();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f51(s1);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseType();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$currPos;
          rule$expects(peg$e38);
          if (input.charCodeAt(peg$currPos) === 61) {
            s6 = peg$c46;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseAssign();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s5;
              s5 = peg$f52(s1, s2, s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          rule$expects(peg$e82);
          if (input.charCodeAt(peg$currPos) === 59) {
            s6 = peg$c87;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f53(s1, s2, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLocalVariableDeclaration() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseGlobalParameter();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseFictiveParameter();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseBasicVariableDeclaration();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f54(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGlobalVariableDeclaration() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseGLOBAL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFictiveParameter();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseBasicVariableDeclaration();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f55(s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInstructionBlock() {
      var s0, s1, s2, s3, s4, s5;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e83);
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c88;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseInstructions();
        rule$expects(peg$e84);
        if (input.charCodeAt(peg$currPos) === 125) {
          s4 = peg$c89;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f56(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e82);
        if (input.charCodeAt(peg$currPos) === 59) {
          s1 = peg$c87;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f57();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseInstructions() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = [];
      s1 = peg$parseInstruction();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseInstruction();
      }

      return s0;
    }

    function peg$parseInstruction() {
      var s0, s1, s2, s3, s4, s5;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseRetInstruction();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBranchInstruction();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLoopInstruction();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBreakInstruction();
            if (s1 === peg$FAILED) {
              s1 = peg$parseContinueInstruction();
              if (s1 === peg$FAILED) {
                s1 = peg$parseDeleteInstruction();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseLocalVariableDeclaration();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseAssign();
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        rule$expects(peg$e82);
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c87;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f56(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRetInstruction() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseRET();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLambda();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f58(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBranchInstruction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLambda();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionBlock();
          if (s3 === peg$FAILED) {
            s3 = peg$parseInstruction();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseELSE();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseInstructionBlock();
              if (s7 === peg$FAILED) {
                s7 = peg$parseInstruction();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                peg$savedPos = s4;
                s4 = peg$f59(s2, s3, s7);
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f60(s2, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBranchExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLambda();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionBlock();
          if (s3 === peg$FAILED) {
            s3 = peg$parseInstruction();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseELSE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              s6 = peg$parseInstructionBlock();
              if (s6 === peg$FAILED) {
                s6 = peg$parseBranchExpression();
                if (s6 === peg$FAILED) {
                  s6 = peg$parseAssign();
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f61(s2, s3, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLoopInstruction() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseWHILE();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f62();
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseUNTIL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$f63();
        }
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLambda();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionBlock();
          if (s3 === peg$FAILED) {
            s3 = peg$parseInstruction();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f64(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBreakInstruction() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseBREAK();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f65();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDeleteInstruction() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseDELETE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseMember();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f66(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseContinueInstruction() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f67();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEnumBlock() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e83);
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c88;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        rule$expects(peg$e84);
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c89;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e82);
        if (input.charCodeAt(peg$currPos) === 59) {
          s1 = peg$c87;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f57();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseClassBlock() {
      var s0, s1, s2, s3, s4;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e83);
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c88;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        rule$expects(peg$e84);
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c89;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e82);
        if (input.charCodeAt(peg$currPos) === 59) {
          s1 = peg$c87;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f57();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseStructBlock() {
      var s0, s1, s2, s3, s4, s5;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e83);
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c88;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = [];
        s4 = peg$parseDeclaration();
        if (s4 === peg$FAILED) {
          s4 = peg$parseLocalVariableDeclaration();
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDeclaration();
          if (s4 === peg$FAILED) {
            s4 = peg$parseLocalVariableDeclaration();
          }
        }
        rule$expects(peg$e84);
        if (input.charCodeAt(peg$currPos) === 125) {
          s4 = peg$c89;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f68(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e82);
        if (input.charCodeAt(peg$currPos) === 59) {
          s1 = peg$c87;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f57();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseTags() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c90;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c81;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseConstantExpression();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = [];
              s10 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s11 = peg$c44;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseConstantExpression();
                if (s13 !== peg$FAILED) {
                  s11 = [s11, s12, s13];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s11 = peg$c44;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                }
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  s13 = peg$parseConstantExpression();
                  if (s13 !== peg$FAILED) {
                    s11 = [s11, s12, s13];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              }
              if (input.charCodeAt(peg$currPos) === 41) {
                s10 = peg$c82;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s5 = [s5, s6, s7, s8, s9, s10, s11];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f69(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e85);
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c91;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e86);
        if (input.charCodeAt(peg$currPos) === 98) {
          s3 = peg$c92;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          rule$expects(peg$e87);
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              rule$expects(peg$e87);
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f70(s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          rule$expects(peg$e88);
          if (input.charCodeAt(peg$currPos) === 120) {
            s3 = peg$c93;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = [];
            rule$expects(peg$e89);
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                rule$expects(peg$e89);
                if (peg$r4.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = input.substring(s4, peg$currPos);
            } else {
              s4 = s5;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s2 = peg$f71(s4);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            rule$expects(peg$e90);
            if (input.charCodeAt(peg$currPos) === 111) {
              s3 = peg$c94;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = [];
              rule$expects(peg$e91);
              if (peg$r5.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  rule$expects(peg$e91);
                  if (peg$r5.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = input.substring(s4, peg$currPos);
              } else {
                s4 = s5;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s2;
                s2 = peg$f72(s4);
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        rule$expects(peg$e92);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            rule$expects(peg$e92);
            if (peg$r6.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          rule$expects(peg$e76);
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c83;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            rule$expects(peg$e93);
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                rule$expects(peg$e93);
                if (peg$r7.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s2 = peg$f74(s1);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f75(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseChar() {
      var s0, s1, s2, s3, s4, s5;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e94);
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c95;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        rule$expects(peg$e95);
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c96;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          rule$expects(peg$e96);
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f76(s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          rule$expects(peg$e96);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e94);
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c95;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f77(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e97);
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c97;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEscapeSequence();
        if (s3 === peg$FAILED) {
          rule$expects(peg$e98);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEscapeSequence();
          if (s3 === peg$FAILED) {
            rule$expects(peg$e98);
            if (peg$r8.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
          }
        }
        rule$expects(peg$e97);
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c97;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f78(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNamedLiteral() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      s1 = peg$parseTRUE();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f79();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFALSE();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f80();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNULL();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f80();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2, s3, s4, s5, s6;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e99);
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$r9.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseComment();
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$r10.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$r10.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseComment();
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$r10.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
          }
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
      peg$silentFails--;

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e99);
      peg$silentFails++;
      s0 = [];
      if (peg$r9.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r9.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c75;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c74;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$begin();
          if (input.substr(peg$currPos, 2) === peg$c98) {
            s7 = peg$c98;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
          }
          peg$end(true);
          if (s7 === peg$FAILED) {
            s6 = undefined;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$begin();
            if (input.substr(peg$currPos, 2) === peg$c98) {
              s7 = peg$c98;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            peg$end(true);
            if (s7 === peg$FAILED) {
              s6 = undefined;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (input.substr(peg$currPos, 2) === peg$c98) {
            s5 = peg$c98;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c75;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$begin();
            if (input.charCodeAt(peg$currPos) === 10) {
              s7 = peg$c99;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
            }
            peg$end(true);
            if (s7 === peg$FAILED) {
              s6 = undefined;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$begin();
              if (input.charCodeAt(peg$currPos) === 10) {
                s7 = peg$c99;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
              }
              peg$end(true);
              if (s7 === peg$FAILED) {
                s6 = undefined;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c99;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      s0 = peg$currPos;
      rule$expects(peg$e95);
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c96;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSingleEscapeCharacter();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f81(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      var rule$expects = function (expected) {
        if (peg$silentFails === 0) peg$expect(expected);
      }

      rule$expects(peg$e94);
      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c95;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e97);
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c97;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e95);
          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c96;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            rule$expects(peg$e86);
            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c92;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f82();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              rule$expects(peg$e100);
              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c100;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f83();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                rule$expects(peg$e101);
                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c101;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f84();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  rule$expects(peg$e102);
                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c102;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f85();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    rule$expects(peg$e103);
                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c103;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f86();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      rule$expects(peg$e104);
                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c104;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f87();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s0 = peg$f88();
                        if (s0) {
                          s0 = peg$FAILED;
                        } else {
                          s0 = undefined;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }


    	module.exports.loc_start = function(){return peg$savedPos;};
    	module.exports.loc_end = function(){return peg$currPos;}
    	module.exports.computeLocation = function(start, end){return peg$computeLocation(start, end);}
    	const {
    		FLAT,RTL,LTR,op,uop,
    		Operation,
    		AssignOperation,
    		CastOperation,
    		UnaryOperation,
    		RightUnaryOperation,
    		Module,
    		IdentifierMember,
    		ExpressionMember,
    		CallExpression,
    		PrimitiveType,
    		ReferenceType,
    		ReferenceMember,
    		TemplatedReferenceMember,
    		PointerType,
    		VariableDeclaration,
    		ArgumentDeclaration,
    		Model,
    		MacroDeclaration,
    		FunctionDeclaration,
    		ClassDeclaration,
    		EnumDeclaration,
    		StructDeclaration,
    		TemplateDeclaration,
    		Ret,
    		RetInstruction,
    		BranchInstruction,
    		BranchExpression,
    		LoopInstruction,
    		BreakInstruction,
    		ContinueInstruction,
    		AddressExpression,
    		NewExpression,
    		DeleteInstruction
    	} = require("./definitions.js");
    	let count = 0;


    peg$begin();
    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$expect(peg$endExpectation());
      }

      throw peg$buildError();
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
});
