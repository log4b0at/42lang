
class Expression 
{
	public:
	@wishRegister
	Operator operator;

	Expression(){
		super();
		
	}
	
	@operator plus(Expression right_operand) {
		
	}
	

}

import { function SomeExternFunc(): string?; } from "hey.wasm";

public class Something {
	
};



public function Dll() {
	int somevar = !{ if someparam return 5; else return 8;};
	let eoe = new Expression_Of_Empire();

	Assembly<"
		_L0:
			or %eax, 5
			jmp _L1
			push %eax

		_main:	
			mov %eax, 5
			cmp [someparam], 0
			jne _L0
			or %eax, 8
			push %eax
	">;
};

@pure
public function SomeFunc(string? fact, ): string?
{
	string somevar = "";
	
	assert somevar != 0;
	
	let expr = new Expression() { operator: Operator.LESS_EQUAL };
	
	let other_expr = new Expression() { ...expr, operator: Operator.GREATER_EQUAL } ;
	
	expr := { operator: Operator.LESS_EQUAL };
	
	const somevar = !{ if expr.isEqual() return false; else if expr != null return true; else return 2; };

	if(somevar % 2)
	{
		
	} else return false;
	
	return expr.toString() :: other_expr.toString() :: 1;
	
}


InitPureTag< GetAllTag<"pure"> >;